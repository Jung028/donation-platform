package com.charityplatform.accountservice.model;

import lombok.Data;
import jakarta.persistence.*;
import java.util.Set;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.Collection;

/**
 * Represents a user in the Charity Platform system.
 * Users can be either donors, charities, or administrators.
 * Each user has a unique username and can have multiple roles.
 */
@Data
@Entity
@Table(name = "users")
public class User implements UserDetails {
    /**
     * Unique identifier for the user.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique username for the user.
     * Used for login and identification.
     * Cannot be null.
     */
    @Column(unique = true, nullable = false)
    @NotBlank(message = "Username is required")
    @Pattern(regexp = "^[a-zA-Z0-9_]{3,}$", message = "Username must be at least 3 characters and contain only letters, numbers, and underscores")
    private String username;

    /**
     * Encrypted password for user authentication.
     * Cannot be null.
     */
    @NotBlank(message = "Password is required")
    @Pattern(regexp = "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,}$", message = "Password must be at least 6 characters and contain both letters and numbers")
    @Column(nullable = false)
    private String password;

    /**
     * User's email address.
     * Used for communication and verification.
     */
    @Email(message = "Please provide a valid email address")
    private String email;

    /**
     * User's first name.
     * Used for display purposes.
     */
    private String firstName;

    /**
     * User's last name.
     * Used for display purposes.
     */
    private String lastName;

    /**
     * User's phone number.
     * Used for contact purposes.
     */
    private String phoneNumber;

    /**
     * Type of user (DONOR, CHARITY, or ADMIN).
     * Determines the user's role in the system.
     */
    @Enumerated(EnumType.STRING)
    private UserType userType;

    /**
     * Collection of roles assigned to this user.
     * Used for authorization and access control.
     * Fetch type is EAGER to ensure roles are always loaded.
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "user_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private Set<Role> roles;

    /**
     * Enum representing different types of users in the system.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return (Collection<? extends GrantedAuthority>) (Collection<?>) roles;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    public enum UserType {
        /** Regular user who makes donations */
        DONOR,
        /** Organization that receives donations */
        CHARITY,
        /** System administrator with full access */
        ADMIN
    }
}
