package com.charityplatform.accountservice.model;

import lombok.Data;
import jakarta.persistence.*;
import java.util.Set;
import org.springframework.security.core.GrantedAuthority;

/**
 * Represents a role in the Charity Platform system.
 * Roles are used for authorization and access control.
 * Each role can be assigned to multiple users.
 */
@Data
@Entity
@Table(name = "roles")
public class Role implements GrantedAuthority {
    /**
     * Unique identifier for the role.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Name of the role.
     * Must be unique across all roles.
     * Typically follows the format "ROLE_[ROLE_NAME]".
     */
    @Column(unique = true)
    private String name;

    /**
     * Collection of users assigned to this role.
     * Uses ManyToMany relationship with User entity.
     * The mapping is owned by the User entity (mappedBy="roles").
     */
    @ManyToMany(mappedBy = "roles")
    private Set<User> users;

    /**
     * Enum representing different roles in the system.
     * Each role represents a specific set of permissions and access levels.
     */
    @Override
    public String getAuthority() {
        return name;
    }

    public enum RoleName {
        /**
         * Regular user role with basic access.
         * Can view public information and make donations.
         */
        ROLE_USER,

        /**
         * Administrator role with full system access.
         * Can manage users, roles, and system settings.
         */
        ROLE_ADMIN,

        /**
         * Donor-specific role.
         * Has additional permissions related to donation tracking and history.
         */
        ROLE_DONOR,

        /**
         * Charity organization role.
         * Has permissions to manage organization profile and receive donations.
         */
        ROLE_CHARITY
    }
}
