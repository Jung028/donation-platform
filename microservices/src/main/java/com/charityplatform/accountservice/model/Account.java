package com.charityplatform.accountservice.model;

import lombok.Data;
import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.NotNull;
import com.charityplatform.accountservice.util.AccountNumberGenerator;

/**
 * Represents a financial account in the Charity Platform system.
 * Each account is associated with a single user and maintains a balance.
 * Accounts are used to track donations and withdrawals.
 */
@Data
@Entity
@Table(name = "accounts")
public class Account {
    /**
     * Unique identifier for the account.
     * Auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Reference to the user who owns this account.
     * Each user can have only one account.
     * Uses OneToOne relationship with User entity.
     */
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "user_id", unique = true, nullable = false)
    private User user;

    /**
     * Unique account number for identification.
     * Generated when the account is created.
     */
    @NotNull(message = "Account number cannot be null")
    private String accountNumber;

    /**
     * Current balance of the account.
     * Uses BigDecimal for precise financial calculations.
     * Precision: 19, Scale: 2 (supports up to 17 digits before decimal point)
     */
    @Column(precision = 19, scale = 2)
    @DecimalMin(value = "0.00", message = "Balance cannot be negative")
    private BigDecimal balance;

    /**
     * Timestamp when the account was created.
     * Automatically set when the account is persisted.
     */
    private LocalDateTime createdAt;

    /**
     * Timestamp of the last update to the account.
     * Automatically updated whenever the account is modified.
     */
    private LocalDateTime updatedAt;

    /**
     * Callback method that runs before the entity is persisted.
     * Sets the creation and update timestamps.
     */
    @PrePersist
    protected void onCreate() {
        accountNumber = AccountNumberGenerator.generateAccountNumber();
        createdAt = LocalDateTime.now();
        updatedAt = LocalDateTime.now();
    }

    /**
     * Callback method that runs before the entity is updated.
     * Updates the last modified timestamp.
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}
